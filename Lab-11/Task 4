#include <iostream>
#include <exception>
#include <string>

class DatabaseException : public std::exception {
public:
    const char* what() const noexcept override {
        return "A database error occurred.";
    }
};

class ConnectionFailedException : public DatabaseException {};
class QueryTimeoutException : public DatabaseException {};

template <typename T>
class DatabaseConnector {
    std::string dbName;

public:
    DatabaseConnector(const std::string& name) : dbName(name) {}

    void connect() {
        if (dbName == "invalid_db") {
            throw ConnectionFailedException();
        }
        std::cout << "Connected to " << dbName << "\n";
    }

    void runQuery() {
        if (dbName == "slow_db") {
            throw QueryTimeoutException();
        }
        std::cout << "Query executed successfully on " << dbName << "\n";
    }
};

int main() {
    try {
        std::cout << "Attempting to connect to invalid_db ...\n";
        DatabaseConnector<int> db1("invalid_db");
        db1.connect();
    }
    catch (const ConnectionFailedException& e) {
        std::cout << "Caught ConnectionFailedException - what(): " << e.what() << "\n";
    }

    try {
        std::cout << "\nAttempting to connect to slow_db ...\n";
        DatabaseConnector<std::string> db2("slow_db");
        db2.connect();
        db2.runQuery();
    }
    catch (const QueryTimeoutException& e) {
        std::cout << "Caught a general DatabaseException - what(): " << e.what() << "\n";
    }

    return 0;
}
