#include <iostream>
#include <exception>

class NegativeStockException : public std::exception {};
class OverCapacityException : public std::exception {};

template <typename T>
class InventoryItem {
    T stock;
    T maxLimit;

public:
    InventoryItem(T maxLimit) : stock(0), maxLimit(maxLimit) {}

    void setStock(T value) {
        if (value < 0)
            throw NegativeStockException();
        if (value > maxLimit)
            throw OverCapacityException();
        stock = value;
    }

    T getStock() const {
        return stock;
    }
};

int main() {
    InventoryItem<int> item(100);

    try {
        std::cout << "Attempting to set stock to -5 ...\n";
        item.setStock(-5);
    }
    catch (const NegativeStockException& e) {
        std::cout << "Caught NegativeStockException - what(): " << e.what() << "\n";
    }

    try {
        std::cout << "\nAttempting to set stock to 120 (max 100) ...\n";
        item.setStock(120);
    }
    catch (const OverCapacityException& e) {
        std::cout << "Caught OverCapacityException - what(): " << e.what() << "\n";
    }

    return 0;
}
