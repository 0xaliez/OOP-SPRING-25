#include <iostream>
#include <cmath>
using namespace std;

class Complex {
    float real;
    float imaginary;

public:
    Complex(float r = 0, float i = 0) : real(r), imaginary(i) {}

    Complex operator+(const Complex& obj) {
        return Complex(real + obj.real, imaginary + obj.imaginary);
    }

	Complex operator-(const Complex& obj) {
        return Complex(real - obj.real, imaginary - obj.imaginary);
    }
    
    Complex operator*(const Complex& obj) const {
        float r = real * obj.real - imaginary * obj.imaginary;
        float i = real * obj.imaginary + imaginary * obj.real;
        return Complex(r, i);
    }

    Complex operator/(const Complex& obj) const {
        float denominator = obj.real * obj.real + obj.imaginary * obj.imaginary;
        float r = (real * obj.real + imaginary * obj.imaginary) / denominator;
        float i = (imaginary * obj.real - real * obj.imaginary) / denominator;
        return Complex(r, i);
    }
    friend ostream& operator<<(ostream& os, const Complex& obj);
    
    friend float magnitude(const Complex& obj);
};

ostream& operator<<(ostream& os, const Complex& obj) {
    os << "(" << obj.real << " + " << obj.imaginary << "i)";
    return os;
}

float magnitude(const Complex& obj){
	return sqrt(obj.real * obj.real + obj.imaginary * obj.imaginary);
}

int main() {
	
	float val;
    Complex c1(2, 4);
    Complex c2(6, 5);
    Complex cSUM, cDIFF, cPROD, cDIV;
    
    cSUM = c1 + c2;
    cDIFF = c1 - c2;
    cPROD = c1 * c2;
    cDIV = c1 / c2;
    
    cout << "Addition Result: " << cSUM << endl;
    cout << "Subtraction Result: " << cDIFF << endl;
    cout << "Multiplication Result: " << cPROD << endl;
    cout << "Division Result: " << cDIV << endl;
    cout << endl;
   
	val = magnitude(c1);
    cout << "Magnitude: " << val;
    
	return 0;
}
