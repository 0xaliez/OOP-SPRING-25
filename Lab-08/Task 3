#include <iostream>

using namespace std;


class Vector2D{
	float x;
	float y;
	
	public:
		Vector2D(float x = 0, float y = 0): x(x), y(y){}

		Vector2D operator+(const Vector2D& v){
			return Vector2D(this->x + v.x, this->y + v.y);
		}
	
		Vector2D operator-(const Vector2D& v){
			return Vector2D(this->x - v.x, this->y - v.y);
		}
		
		Vector2D operator*(float scalar){
			return Vector2D(this->x * scalar, this->y * scalar);
		}
		
		friend ostream& operator<<(ostream& os, const Vector2D& obj);
		
		friend void dotProduct(const Vector2D& v1, const Vector2D& v2);
};

ostream& operator<<(ostream& os, const Vector2D& obj) {
    os << "(" << obj.x << ", " << obj.y << ")" << endl;
    return os;
}

void dotProduct(const Vector2D& v1, const Vector2D& v2){
	cout << "Dot product: (" << v1.x * v2.x << ", " << v1.y * v2.y << ")" << endl;
}

int main() {
	
	Vector2D v1(3, 4), v2(1, 9);
	
	cout << "Addition Result: " << v1 + v2;
	cout << "Subtraction Result: " << v1 - v2;
	cout << "Scalar Multiplication Result: " << v2 * 5;
	
	dotProduct(v1, v2);
	
	return 0;
}
